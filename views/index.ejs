<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/prism.css">
    <style>
        .error-popover {
            --bs-popover-max-width: 200px;
            --bs-popover-border-color: var(--bs-danger);
            --bs-popover-header-bg: var(--bs-danger);
            --bs-popover-header-color: var(--bs-white);
            --bs-popover-body-padding-x: 1rem;
            --bs-popover-body-padding-y: .5rem;
        }
    </style>
</head>

<body>
    <div class="position-absolute top-0 end-0 m-2">
        <button id="darkMode" class="btn btn-dark">Dark</button>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <h1 class="text-center">Chat Room</h1>

                <div class="dropdown mb-1">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="channelSelect"
                        data-bs-toggle="dropdown" aria-expanded="false">
                        General
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="channelSelect" id="channelList">
                    </ul>
                </div>

                <div class="input-group mb-3">
                    <input id="newChannel" type="text" class="form-control" placeholder="Create new channel">

                    <button class="btn btn-secondary" id="createChannel">Create</button>
                </div>
                <div id="usersList" class="mb-3">
                    <h5>Active Users:</h5>
                    <ul id="activeUsers" class="list-group">
                    </ul>
                </div>
                <ul id="messages" class="list-group list-group-flush mt-3">
                </ul>
                <form id="form" class="mt-3">
                    <small class="text-muted" id="typing"></small>
                    <div class="input-group">
                        <textarea id="input" class="form-control" placeholder="Type a message..." rows="1"
                            aria-label="Type a message..." aria-describedby="button-addon2"></textarea>
                        <button class="btn btn-secondary" aria-expanded="false" id="activity"><i
                                class="bi bi-triangle"></i></button>
                        <ul class="dropdown-menu" aria-labelledby="activity">
                            <li>
                                <button class="btn btn-secondary dropdown-item" type="button"
                                    id="tris">Tic-Tac-Toe</button>
                            </li>
                            <li>
                                <button class="btn btn-secondary dropdown-item" type="button"
                                    id="rock-paper-scissors">Rock Paper Scissors</button>
                            </li>
                        </ul>
                        <button class="btn btn-primary">Send</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const form = document.getElementById('form');
        const input = document.getElementById('input');
        const messages = document.getElementById('messages');
        const channelList = document.getElementById('channelList');
        const newChannelInput = document.getElementById('newChannel');
        const createChannelButton = document.getElementById('createChannel');
        const activeUsers = document.getElementById('activeUsers');

        let currentChannel = 'general';

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (input.value) {
                socket.emit('chat message', { channel: currentChannel, msg: input.value });
                input.value = '';
            }
        });

        createChannelButton.addEventListener('click', () => {
            const newChannel = newChannelInput.value.trim();
            if (newChannel) {
                socket.emit('create channel', newChannel);
                newChannelInput.value = '';
            }
        });

        channelSelect.addEventListener('change', (e) => {
            currentChannel = e.target.value;
            messages.innerHTML = '';
            activeUsers.innerHTML = '';
            socket.emit('join channel', currentChannel);
        });
        var lastMessage = '';
        var suggestions = [];

        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                form.dispatchEvent(new Event('submit'));
            }
            setTimeout(() => {
                input.rows = input.value.split('\n').length
            }, 1);

            if (e.key === 'Tab') {
                e.preventDefault();
                var split = input.value.split(' ');
                var cursor = input.selectionStart;
                if (split[split.length - 1].startsWith('@')) {
                    if (suggestions.length > 0) {
                        var index = suggestions.indexOf(split[split.length - 1].substring(1));
                        index++;

                        if (index >= suggestions.length || index < 0) {
                            index = 0;
                        }
                        split[split.length - 1] = '@' + suggestions[index];
                        input.value = split.join(' ');
                        input.setSelectionRange(cursor, input.value.length);
                    }
                }
            }

            if (e.key === 'ArrowUp' && input.value === '') {
                e.preventDefault();

                if (lastMessage) {
                    input.value = lastMessage;
                }
            }

        });

        socket.on('set input', (data) => {
            input.value = data;
        });

        input.addEventListener('input', (e) => {
            socket.emit('typing', { channel: currentChannel, user: socket.id });

            var split = input.value.split(' ');
            var cursor = input.selectionStart;
            if (split[split.length - 1].startsWith('@')) {
                suggestions = [];
                var usersLi = document.querySelectorAll('#activeUsers li');
                var users = [];
                usersLi.forEach(u => {
                    const li = document.createElement('li');
                    li.innerText = u.textContent.replace(' (You)', '');
                    users.push(li);
                });
                var user = split[split.length - 1].substring(1);

                users.forEach(u => {
                    if (u.textContent.startsWith(user)) {
                        suggestions.push(u.textContent);
                    }
                });
                if (suggestions.length > 0) {
                    var suggestion = suggestions[0];
                    split[split.length - 1] = '@' + suggestion;
                    input.value = split.join(' ');
                    input.setSelectionRange(cursor, input.value.length);
                }
            }

        });

        socket.on('typing', (data) => {
            const typing = document.getElementById('typing');
            data = data.filter(user => user !== socket.id);
            if (data.length > 0) {
                typing.textContent = `${data.join(', ')} ${data.length > 1 ? 'are' : 'is'} typing...`;
            } else {
                typing.textContent = '';
            }

        });

        input.addEventListener('blur', () => {
            socket.emit('stop typing', { channel: currentChannel, user: socket.id });
        });

        function checkForValidUser(user) {
            var usersLi = document.querySelectorAll('#activeUsers li');
            var users = [];
            usersLi.forEach(u => {
                const li = document.createElement('li');
                li.innerText = u.textContent.replace(' (You)', '');
                users.push(li);
            });
            var found = false;
            users.forEach(u => {
                if (u.textContent === user) {
                    found = true;
                }
            });

            return found;
        }

        document.getElementById('activity').addEventListener('click', (e) => {
            e.preventDefault();
            // if input has a valid user mention in active users, send activity
            var split = input.value.split(' ');
            var user = split[split.length - 1].substring(1);
            var found = checkForValidUser(user);
            if (found) {
                let dropdownElement = document.getElementById('activity');
                let dropdown = new bootstrap.Dropdown(dropdownElement, {
                    boundary: 'viewport',
                    reference: dropdownElement,
                    display: 'dynamic'
                });
                dropdown.show();

                function createActivity(event) {
                    const type = event.target.id;
                    socket.emit('create activity', { type: type, user: user });
                    dropdown.hide();
                }

                document.getElementById('tris').addEventListener('click', createActivity, { once: true });

                document.getElementById('rock-paper-scissors').addEventListener('click', createActivity, { once: true });



                dropdownElement.addEventListener('hidden.bs.dropdown', () => {
                    dropdown.dispose();
                    document.getElementById('tris').removeEventListener('click', createActivity);
                    document.getElementById('rock-paper-scissors').removeEventListener('click', createActivity);
                }, { once: true });


                setTimeout(() => {
                    document.addEventListener('click', (e) => {
                        if (!e.target.closest('.dropdown')) {
                            dropdown.hide();
                        }
                    }, { once: true });
                }, 10);


            } else {
                var popover = new bootstrap.Popover(document.getElementById('activity'), {
                    content: 'User not found',
                    title: 'Error',
                    trigger: 'manual',
                    placement: 'top',
                    customClass: 'error-popover'
                });
                popover.show();


                setTimeout(() => {
                    popover.hide()
                    document.getElementById('activity').addEventListener('hidden.bs.popover', () => {
                        popover.dispose();

                    }, { once: true });
                }, 2000);


            }

        });

        function getButtons(board, disabled) {
            let buttonContainer = document.createElement('div')
            buttonContainer.className = 'container text-center'
            for (let i = 0; i < 3; i++) {
                let col = document.createElement('div')
                col.className = 'col'
                for (let j = 0; j < 3; j++) {
                    let button = document.createElement('button')
                    button.type = 'button'
                    button.id = i * 3 + j
                    button.className = 'btn btn-' + (board[i][j] == "X" ? "primary" : (board[i][j] == "O" ? "danger" : "secondary")) + " m-1"
                    button.innerText = board[i][j] == "X" ? "✖️" : (board[i][j] == "O" ? "⚫" : "➖")
                    button.disabled = disabled || (board[i][j] == "X" || board[i][j] == "O")
                    col.appendChild(button)
                }
                buttonContainer.appendChild(col)
            }
            return buttonContainer
        }




        socket.on("activity created", (data) => {
            if (data.type == "tris") {
                const item = document.createElement('li');
                item.classList = 'list-group-item text-center';
                const board = document.createElement('div');
                board.id = 'board' + data.id

                board.innerHTML = getButtons(data.board, false).innerHTML
                item.appendChild(document.createTextNode(`${data.player1} started a tris game with ${data.player2}`))
                const p1 = document.createElement('p')
                p1.innerHTML = `X: ${data.player1}`
                const p2 = document.createElement('p')
                p2.innerHTML = `O: ${data.player2}`
                const p3 = document.createElement('p')
                p3.innerHTML = `Current player: ${data.currentPlayer}`
                item.appendChild(p1)
                item.appendChild(p2)
                board.appendChild(p3)

                item.appendChild(board);
                messages.appendChild(item);

                const buttons = document.querySelectorAll('#board' + data.id + ' button')
                buttons.forEach(button => {
                    button.addEventListener('click', () => {
                        socket.emit('tris move', { id: data.id, move: button.id });
                    });
                });
            } else if (data.type = "rock-paper-scissors") {
                /* activity: {
                 player1: socket.id,
                 player2: data.user,
                 type: data.type,
                 channel: currentChannel,
                 startTime: Date.now(),
                 id: Math.floor(Math.random() * 1000000),
                 player1Move: "",
                 player2Move: ""
             }*/
                const item = document.createElement('li');
                item.classList = 'list-group-item text-center';
                const board = document.createElement('div');
                board.id = 'board' + data.id
                item.appendChild(document.createTextNode(`${data.player1} started a rock-paper-scissors game with ${data.player2}`))
                const p1 = document.createElement('p')
                p1.innerHTML = `Player 1: ${data.player1}`
                const p2 = document.createElement('p')
                p2.innerHTML = `Player 2: ${data.player2}`
                item.appendChild(p1)
                item.appendChild(p2)

                const rock = document.createElement('button')
                rock.type = 'button'
                rock.id = 'rock'
                rock.className = 'btn btn-primary m-1'
                rock.innerText = 'Rock'
                rock.disabled = false
                board.appendChild(rock)

                const paper = document.createElement('button')
                paper.type = 'button'
                paper.id = 'paper'
                paper.className = 'btn btn-primary m-1'
                paper.innerText = 'Paper'
                paper.disabled = false
                board.appendChild(paper)

                const scissors = document.createElement('button')
                scissors.type = 'button'
                scissors.id = 'scissors'
                scissors.className = 'btn btn-primary m-1'
                scissors.innerText = 'Scissors'
                scissors.disabled = false
                board.appendChild(scissors)

                //player turn
                const p3 = document.createElement('p')
                p3.innerHTML = `Waiting for ${data.player1move ? data.player2 : data.player1} ${data.player2move ? '' : 'and ' + data.player2} to make a move`
                board.appendChild(p3)

                item.appendChild(board);
                messages.appendChild(item);

                const buttons = document.querySelectorAll('#board' + data.id + ' button')
                buttons.forEach(button => {
                    button.addEventListener('click', () => {
                        socket.emit('rock-paper-scissors move', { id: data.id, move: button.id });
                    });
                });
            }
        });


        socket.on("activity update", (activity) => {
            if (activity.type == "tris") {
                const board = document.getElementById('board' + activity.id)
                if (!board) return
                board.innerHTML = getButtons(activity.board, activity.win || activity.draw).innerHTML
                const p3 = document.createElement('p')
                p3.innerHTML = `Current player: ${activity.currentPlayer}`
                board.appendChild(p3)
                if (activity.win) {
                    const p4 = document.createElement('h3')
                    p4.innerHTML = `Winner: ${activity.currentPlayer}`
                    board.appendChild(p4)
                    const p5 = document.createElement('p')
                    const duration = Math.floor((Date.now() - activity.startTime) / 1000)
                    const durationParsed = duration > 60 ? `${Math.floor(duration / 60)} minutes and ${duration % 60} seconds` : `${duration} seconds`
                    p5.innerHTML = `Duration: ${durationParsed}`
                    board.appendChild(p5)
                }
                if (activity.draw) {
                    const p4 = document.createElement('h3')
                    p4.innerHTML = `Draw`
                    board.appendChild(p4)
                    const p5 = document.createElement('p')
                    const duration = Math.floor((Date.now() - activity.startTime) / 1000)
                    const durationParsed = duration > 60 ? `${Math.floor(duration / 60)} minutes and ${duration % 60} seconds` : `${duration} seconds`
                    p5.innerHTML = `Duration: ${durationParsed}`
                    board.appendChild(p5)
                }

                const buttons = document.querySelectorAll('#board' + activity.id + ' button')
                buttons.forEach(button => {
                    button.addEventListener('click', () => {
                        socket.emit('tris move', { id: activity.id, move: button.id });
                    });
                });
            } else if (activity.type == "rock-paper-scissors") {

                const board = document.getElementById('board' + activity.id)
                if (!board) return
                const currentPlayer = activity.player1Move ? activity.player2 : activity.player1
                board.querySelector('p').innerHTML = `Waiting for ${currentPlayer} to make a move`
                if (activity.player1Move && activity.player2Move) {
                    const p4 = document.createElement('h3')
                    if (activity.player1Move == activity.player2Move) {
                        p4.innerHTML = `Draw`
                    } else if (activity.player1Move == 'rock' && activity.player2Move == 'scissors' || activity.player1Move == 'scissors' && activity.player2Move == 'paper' || activity.player1Move == 'paper' && activity.player2Move == 'rock') {
                        p4.innerHTML = `Winner: ${activity.player1}`
                    } else {
                        p4.innerHTML = `Winner: ${activity.player2}`
                    }
                    board.appendChild(p4)
                    const duration = Math.floor((Date.now() - activity.startTime) / 1000)
                    const durationParsed = duration > 60 ? `${Math.floor(duration / 60)} minutes and ${duration % 60} seconds` : `${duration} seconds`
                    board.querySelector('p').innerHTML = `Duration: ${durationParsed}`
               
                    const buttons = document.querySelectorAll('#board' + activity.id + ' button')
                    buttons.forEach(button => {
                        button.disabled = true
                    });

                }           
            }
        });

        socket.on("activity stop", activity => {
            if (activity.type == "tris") {
                const board = document.getElementById('board' + activity.id)
                if (!board) return
                board.innerHTML = getButtons(activity.board, true).innerHTML
                const p3 = document.createElement('p')
                p3.innerHTML = `Current player: ${activity.currentPlayer}`
                board.appendChild(p3)
                if (activity.win) {
                    const p4 = document.createElement('h3')
                    p4.innerHTML = `Winner: ${activity.currentPlayer}`
                    board.appendChild(p4)
                }
                if (activity.draw) {
                    const p4 = document.createElement('h3')
                    p4.innerHTML = `Draw`
                    board.appendChild(p4)
                }
            } else if (activity.type == "rock-paper-scissors") {
                const board = document.getElementById('board' + activity.id)
                if (!board) return
                const currentPlayer = activity.player1Move ? activity.player2 : activity.player1
                board.querySelector('p').innerHTML = `Waiting for ${currentPlayer} to make a move`
                if (activity.player1Move && activity.player2Move) {
                    const p4 = document.createElement('h3')
                    if (activity.player1Move == activity.player2Move) {
                        p4.innerHTML = `Draw`
                    } else if (activity.player1Move == 'rock' && activity.player2Move == 'scissors' || activity.player1Move == 'scissors' && activity.player2Move == 'paper' || activity.player1Move == 'paper' && activity.player2Move == 'rock') {
                        p4.innerHTML = `Winner: ${activity.player1}`
                    } else {
                        p4.innerHTML = `Winner: ${activity.player2}`
                    }
                    board.appendChild(p4)
                }
                const buttons = document.querySelectorAll('#board' + activity.id + ' button')
                buttons.forEach(button => {
                    button.disabled = true
                });
            }
        });


        socket.on('chat message', (result) => {
            if (result.channel === currentChannel) {
                const item = document.createElement('li');
                const strong = document.createElement('strong');
                strong.textContent = result.user;
                console.debug(result);
                item.appendChild(strong);
                item.innerHTML += `${result.msg}`;
                item.classList = 'list-group-item';
                const mention = new RegExp(`@${socket.id}`, 'g');


                item.addEventListener('contextmenu', (e) => {
                    e.preventDefault();
                    const contextMenu = document.createElement('div');
                    contextMenu.classList = 'btn-group';
                    const buttonCopy = document.createElement('button');
                    buttonCopy.classList = 'btn btn-secondary';
                    buttonCopy.textContent = 'Copy';
                    buttonCopy.addEventListener('click', () => {
                        navigator.clipboard.writeText(result.msgRaw);
                        contextMenu.remove();
                    });
                    contextMenu.appendChild(buttonCopy);
                    const buttonReply = document.createElement('button');
                    buttonReply.classList = 'btn btn-secondary';
                    buttonReply.textContent = 'Reply';
                    buttonReply.addEventListener('click', () => {
                        input.value = `@${result.user} `;
                        input.focus();
                        contextMenu.remove();
                    });
                    contextMenu.appendChild(buttonReply);
                    contextMenu.style.position = 'absolute';
                    contextMenu.style.top = `${e.pageY}px`;
                    contextMenu.style.left = `${e.pageX}px`;

                    document.body.appendChild(contextMenu);
                    document.addEventListener('click', () => {
                        contextMenu.remove();
                    }, { once: true });
                    setTimeout(() => {
                        document.addEventListener('contextmenu', () => {
                            contextMenu.remove();
                        }, { once: true });
                    }, 10);
                });

                if (result.user === socket.id) {
                    item.classList.add('text-end');
                    lastMessage = result.msgRaw;
                }

                if (mention.test(result.msg)) {
                    const alert = document.createElement('div');
                    alert.classList = 'alert alert-warning';
                    alert.innerHTML = item.innerHTML;
                    item.innerHTML = '';
                    item.appendChild(alert);
                    const audio = new Audio('/windowsding.mp3');
                    audio.play();

                    if (Notification.permission === 'granted' && window.document.hasFocus() === false) {
                        new Notification('You were mentioned', {
                            body: result.msgRaw,

                        }).onclick = () => {
                            window.focus();
                            item.scrollIntoView({ behavior: 'smooth' });
                            for (let i = 0; i < 100; i++) {
                                setTimeout(() => {
                                    item.style.backgroundColor = `rgba(0, 25, 100, ${i / 100})`;
                                    if (i == 99) {
                                        for (let i = 0; i < 100; i++) {
                                            setTimeout(() => {
                                                item.style.backgroundColor = `rgba(0, 25, 100, ${1 - i / 100})`;
                                            }, i * 6);
                                        }
                                    }
                                }, i * 6);
                            }
                            console.log("Clicked");
                        };
                    }

                }

                messages.appendChild(item);
                Prism.highlightAll();
                window.scrollTo(0, document.body.scrollHeight);
            }
        });

        socket.on('system message', (data) => {
            const item = document.createElement('li');
            item.textContent = data.msg;
            item.classList = 'list-group-item text-center text-' + data.type;
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

        socket.on('disconnect', () => {
            const item = document.createElement('li');
            console.log('%c Connection lost', 'color: red; font-weight: bold; font-size: 24px;');
            item.textContent = 'Connection lost';
            item.classList = 'list-group-item text-center text-danger';
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

        socket.on('connect', () => {
            const item = document.createElement('li');
            console.log('%c Connection established', 'color: green; font-weight: bold; font-size: 24px;');
            item.textContent = 'Connection established';
            item.classList = 'list-group-item text-center text-success';
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
            socket.emit('join channel', currentChannel);

        });

        socket.on('update channels', (channels) => {
            channelList.innerHTML = '';
            channels.forEach(channel => {
                //{ name: 'general', users: 5}
                const item = document.createElement('li');
                item.classList = 'dropdown-item';
                item.textContent = channel.name + " "
                const span = document.createElement('span');
                span.classList = 'badge bg-secondary';
                span.textContent = channel.users;
                item.appendChild(span);

                item.addEventListener('click', () => {
                    currentChannel = channel.name;
                    messages.innerHTML = '';
                    activeUsers.innerHTML = '';
                    socket.emit('join channel', currentChannel);
                });
                channelList.appendChild(item);

            });
            document.getElementById('channelSelect').innerHTML = currentChannel
        });

        socket.on('update users', (users) => {
            activeUsers.innerHTML = '';
            users.forEach(user => {
                const item = document.createElement('li');
                item.classList = 'list-group-item';
                if (user === socket.id) {
                    item.innerHTML = `<strong>${user}</strong> (You)`;
                } else {
                    item.textContent = user;
                }
                item.addEventListener('contextmenu', (e) => {
                    e.preventDefault();
                    const contextMenu = document.createElement('div');
                    contextMenu.classList = 'btn-group';
                    const buttonMention = document.createElement('button');
                    buttonMention.classList = 'btn btn-secondary';
                    buttonMention.textContent = 'Mention';
                    buttonMention.addEventListener('click', () => {
                        input.value = `@${user} `;
                        input.focus();
                        contextMenu.remove();
                    });
                    contextMenu.appendChild(buttonMention);
                    contextMenu.style.position = 'absolute';
                    contextMenu.style.top = `${e.pageY}px`;
                    contextMenu.style.left = `${e.pageX}px`;

                    document.body.appendChild(contextMenu);
                    document.addEventListener('click', () => {
                        contextMenu.remove();
                    }, { once: true });
                    setTimeout(() => {
                        document.addEventListener('contextmenu', () => {
                            contextMenu.remove();
                        }, { once: true });
                    }, 10);
                });
                activeUsers.appendChild(item);
            });
        });

        function changeTheme(theme) {
            var themeButton = document.getElementById('darkMode');
            if (!theme) {
                var temaaaStorage = localStorage.getItem('theme');
                if (temaaaStorage != "dark") {
                    document.body.setAttribute('data-bs-theme', "dark");
                    localStorage.setItem('theme', "dark");
                }
                else {
                    document.body.setAttribute('data-bs-theme', "light");
                    localStorage.setItem('theme', "light")
                }
            } else if (theme === 'dark' || theme === 'light') {
                document.body.setAttribute('data-bs-theme', theme);
                localStorage.setItem('theme', theme);
                themeButton.innerHTML = theme === 'dark' ? "<div><i class=\"bi bi-sun-fill\"></i></div>" : "<div><i class=\"bi bi-moon-stars-fill\"></i></div>";
                themeButton.classList = theme === 'dark' ? "btn btn-light" : "btn btn-dark";
            }
            const themeS = localStorage.getItem('theme');
            for (let i = 0; i < 720; i++) {
                setTimeout(() => {
                    document.querySelector('#darkMode div').style.transform = `rotate(${i}deg)`;
                    if (i == 360) {
                        themeButton.innerHTML = themeS === 'dark' ? "<div><i class=\"bi bi-sun-fill\"></i></div>" : "<div><i class=\"bi bi-moon-stars-fill\"></i></div>";
                        themeButton.classList = themeS === 'dark' ? "btn btn-light" : "btn btn-dark";
                    }
                }, i * 1);
            }
        }

        const theme = localStorage.getItem('theme');
        changeTheme(theme);

        document.getElementById('darkMode').addEventListener('click', () => {
            changeTheme();
        });

        window.addEventListener('load', () => {
            if (Notification.permission !== 'granted') {
                Notification.requestPermission();
            }
        });


    </script>
    <script src="/prism.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
</body>

</html>